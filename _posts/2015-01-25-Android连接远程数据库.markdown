---
layout: post
title:  Android连接远程数据库
author:	Guo Yonghui
date:   2015-01-25 22:23:00
categories: [Android,数据库,网络通信]
---

本文将介绍Android连接远程数据库的方法，基本思路是在服务器端写一个Java web程序作为Android连接数据库的“中转站”，Android设备与服务器间将基于Http协议进行通信，本文中将通过模拟一个登陆流程来实现Android连接远程数据库，Android设备作为登陆客户端，登陆信息储存在服务器端。

一、服务器端：

服务器端基于struts2框架以及MySQL数据库进行开发，首先在eclipse新建Dynamic Web Project，添加以下第三方类库到/WebContent/WEB-INF/lib中：

![image](http://ccyak.img43.wal8.com/img43/508362_20150124224702/142219821351.png)

在MySQL数据库中创建user数据表并添加数据：

![image](http://ccyak.img43.wal8.com/img43/508362_20150124224702/142219917528.png)

![image](http://ccyak.img43.wal8.com/img43/508362_20150124224702/142219917575.png)

接下来，在web.xml中添加以下代码来配置struts：

	<filter>
		<filter-name>struts2</filter-name>
		<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

在src目录下添加struts.xml文件用来配置action（接下来将进行），新建一个action类——LoginAction：

	package com.guoyonghui.server.action;

	import java.net.URLDecoder;
	import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;

	import com.guoyonghui.server.util.DBManager;
	import com.opensymphony.xwork2.ActionSupport;

	public class LoginAction extends ActionSupport {

		/**
		 * 
		 */
		private static final long serialVersionUID = 3474286179742339817L;

		private static final String LOGIN_SUCCESS = "Login success";
		private static final String LOGIN_FAIL = "Login fail";
		
		private String msg;
		private String username;
		private String password;
		
		public String getMsg() {
			return msg;
		}

		public void setMsg(String msg) {
			this.msg = msg;
		}

		public String getUsername() {
			return username;
		}

		public void setUsername(String username) {
			this.username = username;
		}

		public String getPassword() {
			return password;
		}

		public void setPassword(String password) {
			this.password = password;
		}

		@Override
		public String execute() throws Exception {
			String sql = "select * from user where username = ? and password = ?";
			
			Connection conn = DBManager.getConnection();
			PreparedStatement pstmt = conn.prepareStatement(sql);
			setUsername(URLDecoder.decode(URLDecoder.decode(username, "UTF-8"), "UTF-8"));
			pstmt.setString(1, getUsername());
			pstmt.setString(2, getPassword());
			ResultSet rs = pstmt.executeQuery();
			
			if(rs.next()) {
				setMsg(LOGIN_SUCCESS);
			} else {
				setMsg(LOGIN_FAIL);
			}
			DBManager.releaseConnection(conn, pstmt, rs);
			
			return super.execute();
		}

	}

接下来配置action，由于在本文中服务器端向客户端返回数据的格式采用json格式，因此extends为json-default，并且action的result类型为json：

	<package name="default" namespace="/" extends="json-default">
	    <action name="LoginAction" class="com.guoyonghui.server.action.LoginAction">
	        <result type="json" />
	    </action>
	</package>

至此服务器端编写完毕，在浏览器中进行访问测试：

![image](http://ccyak.img43.wal8.com/img43/508362_20150124224702/142219937769.png)

![image](http://ccyak.img43.wal8.com/img43/508362_20150124224702/142219937856.png)