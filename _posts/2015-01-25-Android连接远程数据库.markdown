---
layout: post
title:  Android连接远程数据库
author:	Guo Yonghui
date:   2015-01-25 22:23:00
categories: [Android,数据库,网络通信]
---

本文将介绍Android连接远程数据库的方法，基本思路是在服务器端写一个Java web程序作为Android连接数据库的“中转站”，Android设备与服务器间将基于Http协议进行通信，本文中将通过模拟一个登陆流程来实现Android连接远程数据库，Android设备作为登陆客户端，登陆信息储存在服务器端。

一、服务器端：

服务器端基于struts2框架以及MySQL数据库进行开发，首先在eclipse新建Dynamic Web Project，添加以下第三方类库到/WebContent/WEB-INF/lib中：

![image](http://ccyak.img43.wal8.com/img43/508362_20150124224702/142219821351.png)

在MySQL数据库中创建user数据表并添加数据：

![image](http://ccyak.img43.wal8.com/img43/508362_20150124224702/142219917528.png)

![image](http://ccyak.img43.wal8.com/img43/508362_20150124224702/142219917575.png)

接下来，在web.xml中添加以下代码来配置struts：

	<filter>
		<filter-name>struts2</filter-name>
		<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

在src目录下添加struts.xml文件用来配置action（接下来将进行），新建一个action类——LoginAction：

	package com.guoyonghui.server.action;

	import java.net.URLDecoder;
	import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;

	import com.guoyonghui.server.util.DBManager;
	import com.opensymphony.xwork2.ActionSupport;

	public class LoginAction extends ActionSupport {

		/**
		 * 
		 */
		private static final long serialVersionUID = 3474286179742339817L;

		private static final String LOGIN_SUCCESS = "Login success";
		private static final String LOGIN_FAIL = "Login fail";
		
		private String msg;
		private String username;
		private String password;
		
		public String getMsg() {
			return msg;
		}

		public void setMsg(String msg) {
			this.msg = msg;
		}

		public String getUsername() {
			return username;
		}

		public void setUsername(String username) {
			this.username = username;
		}

		public String getPassword() {
			return password;
		}

		public void setPassword(String password) {
			this.password = password;
		}

		@Override
		public String execute() throws Exception {
			String sql = "select * from user where username = ? and password = ?";
			
			Connection conn = DBManager.getConnection();
			PreparedStatement pstmt = conn.prepareStatement(sql);
			setUsername(URLDecoder.decode(URLDecoder.decode(username, "UTF-8"), "UTF-8"));
			pstmt.setString(1, getUsername());
			pstmt.setString(2, getPassword());
			ResultSet rs = pstmt.executeQuery();
			
			if(rs.next()) {
				setMsg(LOGIN_SUCCESS);
			} else {
				setMsg(LOGIN_FAIL);
			}
			DBManager.releaseConnection(conn, pstmt, rs);
			
			return super.execute();
		}

	}

接下来配置action，由于在本文中服务器端向客户端返回数据的格式采用json格式，因此extends为json-default，并且action的result类型为json：

	<package name="default" namespace="/" extends="json-default">
	    <action name="LoginAction" class="com.guoyonghui.server.action.LoginAction">
	        <result type="json" />
	    </action>
	</package>

至此服务器端编写完毕，在浏览器中进行访问测试：

![image](http://ccyak.img43.wal8.com/img43/508362_20150124224702/142219962366.png)

![image](http://ccyak.img43.wal8.com/img43/508362_20150124224702/142219962311.png)


二、客户端

新建Android Project，并创建LoginActivity类和activity_login.xml布局文件

activity_login.xml：

	<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
	    xmlns:tools="http://schemas.android.com/tools"
	    android:layout_width="match_parent"
	    android:layout_height="match_parent"
	    tools:context="com.guoyonghui.androiddatabaseconnectionclient.LoginActivity" >

		<EditText
		    android:id="@+id/username_edittext"
		    android:layout_width="200dp"
		    android:layout_height="40dp"
		    android:layout_centerInParent="true"
		    android:hint="@string/username_hint" />
		
		<EditText
		    android:id="@+id/password_edittext"
		    android:layout_width="200dp"
		    android:layout_height="40dp"
		    android:layout_below="@id/username_edittext"
		    android:layout_marginTop="10dp"
		    android:layout_centerHorizontal="true"
		    android:hint="@string/password_hint"
		    android:inputType="textPassword" />
		
		<Button
		    android:id="@+id/login_button"
		    android:layout_width="200dp"
		    android:layout_height="40dp"
		    android:layout_below="@id/password_edittext"
		    android:layout_marginTop="10dp"
		    android:layout_centerHorizontal="true"
		    android:text="@string/login" />

	</RelativeLayout>

LoginActivity：

	package com.guoyonghui.androiddatabaseconnectionclient;

	import java.io.ByteArrayOutputStream;
	import java.io.IOException;
	import java.io.InputStream;
	import java.net.HttpURLConnection;
	import java.net.MalformedURLException;
	import java.net.URL;
	import java.net.URLEncoder;

	import org.json.JSONException;
	import org.json.JSONObject;

	import android.app.Activity;
	import android.os.AsyncTask;
	import android.os.Bundle;
	import android.text.Editable;
	import android.text.TextWatcher;
	import android.view.View;
	import android.widget.Button;
	import android.widget.EditText;
	import android.widget.Toast;

	public class LoginActivity extends Activity {
		
		private static final String LOGIN_SUCCESS = "Login success";
		private static final String LOGIN_FAIL = "Login fail";
		
		private EditText mUsernameEditText;
		private EditText mPasswordEditText;
		private Button mLoginButton;
		
		private String mUsername;
		private String mPassword;
		
		@Override
		protected void onCreate(Bundle savedInstanceState) {
			super.onCreate(savedInstanceState);
			setContentView(R.layout.activity_login);

			mUsernameEditText = (EditText)findViewById(R.id.username_edittext);
			mPasswordEditText = (EditText)findViewById(R.id.password_edittext);
			mLoginButton = (Button)findViewById(R.id.login_button);
			
			mUsernameEditText.addTextChangedListener(new TextWatcher() {
				
				@Override
				public void onTextChanged(CharSequence s, int start, int before, int count) {
					mUsername = s.toString();
				}
				
				@Override
				public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
				
				@Override
				public void afterTextChanged(Editable s) {}
			});
			
			mPasswordEditText.addTextChangedListener(new TextWatcher() {
				
				@Override
				public void onTextChanged(CharSequence s, int start, int before, int count) {
					mPassword = s.toString();
				}
				
				@Override
				public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
				
				@Override
				public void afterTextChanged(Editable s) {}
			});
			
			mLoginButton.setOnClickListener(new View.OnClickListener() {
				
				@Override
				public void onClick(View v) {
					if((mUsername != null && mUsername.length() > 0) && (mPassword != null && mPassword.length() > 0)) {
						new LoginAsyncTask().execute(mUsername, mPassword);
					} else {
						Toast.makeText(LoginActivity.this, R.string.input_tip, Toast.LENGTH_SHORT).show();
					}
				}
			});
		}
		
		private boolean login(String username, String password) {
			try {
				username = URLEncoder.encode(URLEncoder.encode(username, "UTF-8"), "UTF-8");
				URL url = new URL("http://183.164.136.125:1121/AndroidDatabaseConnectionServer/LoginAction?username=" + username + "&password=" + password);
				HttpURLConnection conn = (HttpURLConnection) url.openConnection();
				
				ByteArrayOutputStream bos = new ByteArrayOutputStream();
				InputStream is = conn.getInputStream();
				byte[] buffer = new byte[1024];
				int bytesRead = 0;
				
				while((bytesRead = is.read(buffer)) != -1) {
					bos.write(buffer, 0, bytesRead);
				}

				String jsonString = new String(bos.toByteArray());
				JSONObject json = new JSONObject(jsonString);
				
				bos.flush();
				bos.close();
				is.close();
				
				if(json.getString("msg").equals(LOGIN_SUCCESS)) {
					return true;
				} else if(json.getString("msg").equals(LOGIN_FAIL)) {
					return false;
				}
				
			} catch (MalformedURLException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			} catch (JSONException e) {
				e.printStackTrace();
			}
			return false;
		}
		
		private void showLoginResult(boolean isLoginSuccess) {
			if(isLoginSuccess) {
				Toast.makeText(this, R.string.login_success, Toast.LENGTH_SHORT).show();
			} else {
				Toast.makeText(this, R.string.login_fail, Toast.LENGTH_SHORT).show();
			}
		}
		
		private class LoginAsyncTask extends AsyncTask<String, Void, Boolean> {

			@Override
			protected Boolean doInBackground(String... params) {
				return login(params[0], params[1]);
			}
			
			@Override
			protected void onPostExecute(Boolean result) {
				showLoginResult(result);
			}
		}

	}

由于使用到网络通信，因此需要在AndroidManifest.xml文件中加入以下内容：

	<uses-permission
	        android:name="android.permission.INTERNET" />

至此客户端编写完毕，通过真机测试，完成Android对远程数据库的连接访问：

![image](http://ccyak.img43.wal8.com/img43/508362_20150124224702/142220010287.png)

![image](http://ccyak.img43.wal8.com/img43/508362_20150124224702/142220010153.png)